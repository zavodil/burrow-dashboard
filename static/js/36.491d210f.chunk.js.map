{"version":3,"sources":["assets/images/avatars/1.jpg","assets/images/avatars/2.jpg","assets/images/avatars/3.jpg","assets/images/avatars/4.jpg","assets/images/avatars/5.jpg","assets/images/avatars/6.jpg","views/dashboard/Dashboard.js"],"names":["Dashboard","props","burrowData","cilUser","cilUserFemale","cibGoogle","cibFacebook","cibTwitter","cibLinkedin","cifUs","cibCcMastercard","cifBr","cibCcVisa","cifIn","cibCcStripe","cifFr","cibCcPaypal","cifEs","cibCcApplePay","cifPl","cibCcAmex","burrowUsers","Object","keys","totalBorrowed","totalCollateral","users","length","map","index","account","parseInt","parseFloat","adjustedBorrowedSum","adjustedCollateralSum","color","healthFactor","name","accountId","substr","slice","toFixed","className","adjustedDebt","scope","total","totalBorrowedPercent","totalCollateralPercent","xs","cols","md","thin","value"],"mappings":"2XAAe,ICAA,ICAA,ICAA,ICAA,ICAA,I,OCyjBAA,UAjgBIC,IAEjB,IAAIC,EAAaD,EAAMC,WAwBEC,IACEC,IAIQC,IACNC,IACDC,IACCC,IAWKC,IAMOC,IAUJC,IAMFC,IAMCC,IAMCC,IAMAC,IAMAC,IAUDC,IAMQC,IAUPC,IAMFC,IAWnC,IAAIC,EAAcC,OAAOC,KAAKrB,GAC1BsB,EAAgB,EAChBC,EAAkB,EAClBC,EACFL,EAAYM,OAAS,EACjBN,EAAYO,KAAKC,IACf,GAAIA,EAAO,CACT,MAAMC,EAAU5B,EAAW6B,SAASF,IAEpCL,GAAiBQ,WAAWF,EAAQG,qBAEpCR,GAAmBO,WAAWF,EAAQI,uBAEtC,IAAIC,EAAQL,EAAQM,aAAe,EAAI,SAAW,GAClD,OACE,eAAC,KAAD,CAAoCD,MAAOA,EAA3C,UAEE,cAAC,KAAD,WAxBmBE,EAwBsBP,EAAQQ,UAvBzDD,EAAKV,OAAS,GACTU,EAAKE,OAAO,EAAG,IAAM,MAAQF,EAAKG,OAAO,GAEzCH,KAqBG,eAAC,KAAD,WACG,IAEAL,WAAWF,EAAQG,qBAAqBQ,QAAQ,MAEnD,eAAC,KAAD,WACG,IAEAT,WAAWF,EAAQI,uBAAuBO,QAAQ,MAErD,eAAC,KAAD,CAAgBC,UAAU,yBAA1B,UACG,IAEAV,WAAWF,EAAQa,cAAcF,QAAQ,MAE5C,cAAC,KAAD,CAAgBC,UAAU,yBAA1B,SAEGV,WAAWF,EAAQM,cAAcK,QAAQ,OApB9B,WAAaZ,GAyB/B,OACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAkBe,MAAM,MAAxB,8BAjDmBP,SAsD3B,GAEFQ,EAAQrB,EAAgBC,EACxBqB,EAAwB,IAAMtB,EAAiBqB,EAC/CE,EAA0B,IAAMtB,EAAmBoB,EACvD,OACE,qCACE,cAAC,IAAD,UACE,eAAC,KAAD,CAAMG,GAAI,CAAEC,KAAM,GAAKC,GAAI,CAAED,KAAM,GAAKP,UAAU,cAAlD,UACE,eAAC,IAAD,CAAMA,UAAU,eAAhB,UACE,qBAAKA,UAAU,uBAAf,4BACA,mCACG,IACAlB,EAAciB,QAAQ,GAFzB,KAE+BK,EAAqBL,QAAQ,GAF5D,QAIA,cAAC,KAAD,CAAWU,MAAI,EAACT,UAAU,OAAOP,MAAO,UAAWiB,MAAON,MANzB,kBAQnC,eAAC,IAAD,CAAMJ,UAAU,eAAhB,UACE,qBAAKA,UAAU,uBAAf,8BACA,mCACG,IACAjB,EAAgBgB,QAAQ,GAF3B,KAEiCM,EAAuBN,QAAQ,GAFhE,QAIA,cAAC,KAAD,CAAWU,MAAI,EAACT,UAAU,OAAOP,MAAO,YAAaiB,MAAOL,MAN3B,yBAavC,cAAC,IAAD,CAAOL,UAAU,OAAjB,SACE,cAAC,IAAD,UACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAkBE,MAAM,MAAxB,uBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,sBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,wBACA,cAAC,KAAD,CAAkBA,MAAM,MAAMF,UAAU,yBAAxC,kBAGA,cAAC,KAAD,CAAkBE,MAAM,MAAMF,UAAU,yBAAxC,gCAKJ,cAAC,KAAD,UAAahB","file":"static/js/36.491d210f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/1.34eedf58.jpg\";","export default __webpack_public_path__ + \"static/media/2.0c06e43d.jpg\";","export default __webpack_public_path__ + \"static/media/3.07e357f5.jpg\";","export default __webpack_public_path__ + \"static/media/4.3ddf28ab.jpg\";","export default __webpack_public_path__ + \"static/media/5.3e55ee5f.jpg\";","export default __webpack_public_path__ + \"static/media/6.edefb235.jpg\";","import React, { lazy } from 'react'\n\nimport {\n  CAvatar,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from '@coreui/react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cibCcAmex,\n  cibCcApplePay,\n  cibCcMastercard,\n  cibCcPaypal,\n  cibCcStripe,\n  cibCcVisa,\n  cibGoogle,\n  cibFacebook,\n  cibLinkedin,\n  cifBr,\n  cifEs,\n  cifFr,\n  cifIn,\n  cifPl,\n  cifUs,\n  cibTwitter,\n  cilCloudDownload,\n  cilPeople,\n  cilUser,\n  cilUserFemale,\n} from '@coreui/icons'\n\nimport avatar1 from 'src/assets/images/avatars/1.jpg'\nimport avatar2 from 'src/assets/images/avatars/2.jpg'\nimport avatar3 from 'src/assets/images/avatars/3.jpg'\nimport avatar4 from 'src/assets/images/avatars/4.jpg'\nimport avatar5 from 'src/assets/images/avatars/5.jpg'\nimport avatar6 from 'src/assets/images/avatars/6.jpg'\n\nconst WidgetsDropdown = lazy(() => import('../widgets/WidgetsDropdown.js'))\nconst WidgetsBrand = lazy(() => import('../widgets/WidgetsBrand.js'))\n\nconst Dashboard = (props) => {\n  // eslint-disable-next-line react/prop-types\n  let burrowData = props.burrowData\n  const random = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  const progressExample = [\n    { title: 'Visits', value: '29.703 Users', percent: 40, color: 'success' },\n    { title: 'Unique', value: '24.093 Users', percent: 20, color: 'info' },\n    { title: 'Pageviews', value: '78.706 Views', percent: 60, color: 'warning' },\n    { title: 'New Users', value: '22.123 Users', percent: 80, color: 'danger' },\n    { title: 'Bounce Rate', value: 'Average Rate', percent: 40.15, color: 'primary' },\n  ]\n\n  const progressGroupExample1 = [\n    { title: 'Monday', value1: 34, value2: 78 },\n    { title: 'Tuesday', value1: 56, value2: 94 },\n    { title: 'Wednesday', value1: 12, value2: 67 },\n    { title: 'Thursday', value1: 43, value2: 91 },\n    { title: 'Friday', value1: 22, value2: 73 },\n    { title: 'Saturday', value1: 53, value2: 82 },\n    { title: 'Sunday', value1: 9, value2: 69 },\n  ]\n\n  const progressGroupExample2 = [\n    { title: 'Male', icon: cilUser, value: 53 },\n    { title: 'Female', icon: cilUserFemale, value: 43 },\n  ]\n\n  const progressGroupExample3 = [\n    { title: 'Organic Search', icon: cibGoogle, percent: 56, value: '191,235' },\n    { title: 'Facebook', icon: cibFacebook, percent: 15, value: '51,223' },\n    { title: 'Twitter', icon: cibTwitter, percent: 11, value: '37,564' },\n    { title: 'LinkedIn', icon: cibLinkedin, percent: 8, value: '27,319' },\n  ]\n\n  const tableExample = [\n    {\n      avatar: { src: avatar1, status: 'success' },\n      user: {\n        name: 'Yiorgos Avraamu',\n        new: true,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'USA', flag: cifUs },\n      usage: {\n        value: 50,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'success',\n      },\n      payment: { name: 'Mastercard', icon: cibCcMastercard },\n      activity: '10 sec ago',\n    },\n    {\n      avatar: { src: avatar2, status: 'danger' },\n      user: {\n        name: 'Avram Tarasios',\n        new: false,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'Brazil', flag: cifBr },\n      usage: {\n        value: 22,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'info',\n      },\n      payment: { name: 'Visa', icon: cibCcVisa },\n      activity: '5 minutes ago',\n    },\n    {\n      avatar: { src: avatar3, status: 'warning' },\n      user: { name: 'Quintin Ed', new: true, registered: 'Jan 1, 2021' },\n      country: { name: 'India', flag: cifIn },\n      usage: {\n        value: 74,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'warning',\n      },\n      payment: { name: 'Stripe', icon: cibCcStripe },\n      activity: '1 hour ago',\n    },\n    {\n      avatar: { src: avatar4, status: 'secondary' },\n      user: { name: 'Enéas Kwadwo', new: true, registered: 'Jan 1, 2021' },\n      country: { name: 'France', flag: cifFr },\n      usage: {\n        value: 98,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'danger',\n      },\n      payment: { name: 'PayPal', icon: cibCcPaypal },\n      activity: 'Last month',\n    },\n    {\n      avatar: { src: avatar5, status: 'success' },\n      user: {\n        name: 'Agapetus Tadeáš',\n        new: true,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'Spain', flag: cifEs },\n      usage: {\n        value: 22,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'primary',\n      },\n      payment: { name: 'Google Wallet', icon: cibCcApplePay },\n      activity: 'Last week',\n    },\n    {\n      avatar: { src: avatar6, status: 'danger' },\n      user: {\n        name: 'Friderik Dávid',\n        new: true,\n        registered: 'Jan 1, 2021',\n      },\n      country: { name: 'Poland', flag: cifPl },\n      usage: {\n        value: 43,\n        period: 'Jun 11, 2021 - Jul 10, 2021',\n        color: 'success',\n      },\n      payment: { name: 'Amex', icon: cibCcAmex },\n      activity: 'Last week',\n    },\n  ]\n  const getNearAccountShortName = (name) => {\n    if (name.length > 20) {\n      return name.substr(0, 10) + '...' + name.slice(-3)\n    } else {\n      return name\n    }\n  }\n  let burrowUsers = Object.keys(burrowData)\n  let totalBorrowed = 0\n  let totalCollateral = 0\n  let users =\n    burrowUsers.length > 0\n      ? burrowUsers.map((index) => {\n          if (index) {\n            const account = burrowData[parseInt(index)]\n            /* eslint-disable-next-line react/prop-types */\n            totalBorrowed += parseFloat(account.adjustedBorrowedSum)\n            /* eslint-disable-next-line react/prop-types */\n            totalCollateral += parseFloat(account.adjustedCollateralSum)\n            /* eslint-disable-next-line react/prop-types */\n            let color = account.healthFactor < 1 ? 'danger' : ''\n            return (\n              <CTableRow key={'row-key-' + index} color={color}>\n                {/* eslint-disable-next-line react/prop-types */}\n                <CTableDataCell>{getNearAccountShortName(account.accountId)}</CTableDataCell>\n                <CTableDataCell>\n                  {'$'}\n                  {/* eslint-disable-next-line react/prop-types */}\n                  {parseFloat(account.adjustedBorrowedSum).toFixed(2)}\n                </CTableDataCell>\n                <CTableDataCell>\n                  {'$'}\n                  {/* eslint-disable-next-line react/prop-types */}\n                  {parseFloat(account.adjustedCollateralSum).toFixed(2)}\n                </CTableDataCell>\n                <CTableDataCell className=\"d-none d-lg-table-cell\">\n                  {'$'}\n                  {/* eslint-disable-next-line react/prop-types */}\n                  {parseFloat(account.adjustedDebt).toFixed(2)}\n                </CTableDataCell>\n                <CTableDataCell className=\"d-none d-lg-table-cell\">\n                  {/* eslint-disable-next-line react/prop-types */}\n                  {parseFloat(account.healthFactor).toFixed(2)}\n                </CTableDataCell>\n              </CTableRow>\n            )\n          } else {\n            return (\n              <CTableRow>\n                <CTableHeaderCell scope=\"row\">Data Not Found</CTableHeaderCell>\n              </CTableRow>\n            )\n          }\n        })\n      : ''\n\n  let total = totalBorrowed + totalCollateral\n  let totalBorrowedPercent = (100 * totalBorrowed) / total\n  let totalCollateralPercent = (100 * totalCollateral) / total\n  return (\n    <>\n      <CCardHeader>\n        <CRow xs={{ cols: 1 }} md={{ cols: 2 }} className=\"text-center\">\n          <CCol className=\"mb-sm-2 mb-0\" key=\"total-borrowed\">\n            <div className=\"text-medium-emphasis\">Total Borrowed</div>\n            <strong>\n              {'$'}\n              {totalBorrowed.toFixed(2)} ({totalBorrowedPercent.toFixed(2)}%)\n            </strong>\n            <CProgress thin className=\"mt-2\" color={'primary'} value={totalBorrowedPercent} />\n          </CCol>\n          <CCol className=\"mb-sm-2 mb-0\" key=\"total-collateral\">\n            <div className=\"text-medium-emphasis\">Total Collateral</div>\n            <strong>\n              {'$'}\n              {totalCollateral.toFixed(2)} ({totalCollateralPercent.toFixed(2)}%)\n            </strong>\n            <CProgress thin className=\"mt-2\" color={'secondary'} value={totalCollateralPercent} />\n          </CCol>\n        </CRow>\n      </CCardHeader>\n      {/*\n      <WidgetsDropdown />\n      */}\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CTable>\n              <CTableHead>\n                <CTableRow>\n                  <CTableHeaderCell scope=\"col\">AccountId</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Borrowed</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Collateral</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\" className=\"d-none d-lg-table-cell\">\n                    Debt\n                  </CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\" className=\"d-none d-lg-table-cell\">\n                    Health Factor\n                  </CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>{users}</CTableBody>\n            </CTable>\n          </CRow>\n          {/*\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Traffic\n              </h4>\n              <div className=\"small text-medium-emphasis\">January - July 2021</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n              <CButton color=\"primary\" className=\"float-end\">\n                <CIcon icon={cilCloudDownload} />\n              </CButton>\n              <CButtonGroup className=\"float-end me-3\">\n                {['Day', 'Month', 'Year'].map((value) => (\n                  <CButton\n                    color=\"outline-secondary\"\n                    key={value}\n                    className=\"mx-0\"\n                    active={value === 'Month'}\n                  >\n                    {value}\n                  </CButton>\n                ))}\n              </CButtonGroup>\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n              datasets: [\n                {\n                  label: 'My First dataset',\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                  fill: true,\n                },\n                {\n                  label: 'My Second dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-success'),\n                  pointHoverBackgroundColor: getStyle('--cui-success'),\n                  borderWidth: 2,\n                  data: [\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                    random(50, 200),\n                  ],\n                },\n                {\n                  label: 'My Third dataset',\n                  backgroundColor: 'transparent',\n                  borderColor: getStyle('--cui-danger'),\n                  pointHoverBackgroundColor: getStyle('--cui-danger'),\n                  borderWidth: 1,\n                  borderDash: [8, 5],\n                  data: [65, 65, 65, 65, 65, 65, 65],\n                },\n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n          */}\n        </CCardBody>\n        {/*\n        <CCardFooter>\n          <CRow xs={{ cols: 1 }} md={{ cols: 5 }} className=\"text-center\">\n            {progressExample.map((item, index) => (\n              <CCol className=\"mb-sm-2 mb-0\" key={index}>\n                <div className=\"text-medium-emphasis\">{item.title}</div>\n                <strong>\n                  {item.value} ({item.percent}%)\n                </strong>\n                <CProgress thin className=\"mt-2\" color={item.color} value={item.percent} />\n              </CCol>\n            ))}\n          </CRow>\n        </CCardFooter>\n        */}\n      </CCard>\n\n      {/*\n      <WidgetsBrand withCharts />\n\n      <CRow>\n        <CCol xs>\n          <CCard className=\"mb-4\">\n            <CCardHeader>Traffic {' & '} Sales</CCardHeader>\n            <CCardBody>\n              <CRow>\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-info py-1 px-3\">\n                        <div className=\"text-medium-emphasis small\">New Clients</div>\n                        <div className=\"fs-5 fw-semibold\">9,123</div>\n                      </div>\n                    </CCol>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-danger py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Recurring Clients</div>\n                        <div className=\"fs-5 fw-semibold\">22,643</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n                  {progressGroupExample1.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-prepend\">\n                        <span className=\"text-medium-emphasis small\">{item.title}</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"info\" value={item.value1} />\n                        <CProgress thin color=\"danger\" value={item.value2} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n\n                <CCol xs={12} md={6} xl={6}>\n                  <CRow>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-warning py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Pageviews</div>\n                        <div className=\"fs-5 fw-semibold\">78,623</div>\n                      </div>\n                    </CCol>\n                    <CCol sm={6}>\n                      <div className=\"border-start border-start-4 border-start-success py-1 px-3 mb-3\">\n                        <div className=\"text-medium-emphasis small\">Organic</div>\n                        <div className=\"fs-5 fw-semibold\">49,123</div>\n                      </div>\n                    </CCol>\n                  </CRow>\n\n                  <hr className=\"mt-0\" />\n\n                  {progressGroupExample2.map((item, index) => (\n                    <div className=\"progress-group mb-4\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">{item.value}%</span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"warning\" value={item.value} />\n                      </div>\n                    </div>\n                  ))}\n\n                  <div className=\"mb-5\"></div>\n\n                  {progressGroupExample3.map((item, index) => (\n                    <div className=\"progress-group\" key={index}>\n                      <div className=\"progress-group-header\">\n                        <CIcon className=\"me-2\" icon={item.icon} size=\"lg\" />\n                        <span>{item.title}</span>\n                        <span className=\"ms-auto fw-semibold\">\n                          {item.value}{' '}\n                          <span className=\"text-medium-emphasis small\">({item.percent}%)</span>\n                        </span>\n                      </div>\n                      <div className=\"progress-group-bars\">\n                        <CProgress thin color=\"success\" value={item.percent} />\n                      </div>\n                    </div>\n                  ))}\n                </CCol>\n              </CRow>\n\n              <br />\n\n              <CTable align=\"middle\" className=\"mb-0 border\" hover responsive>\n                <CTableHead color=\"light\">\n                  <CTableRow>\n                    <CTableHeaderCell className=\"text-center\">\n                      <CIcon icon={cilPeople} />\n                    </CTableHeaderCell>\n                    <CTableHeaderCell>User</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Country</CTableHeaderCell>\n                    <CTableHeaderCell>Usage</CTableHeaderCell>\n                    <CTableHeaderCell className=\"text-center\">Payment Method</CTableHeaderCell>\n                    <CTableHeaderCell>Activity</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {tableExample.map((item, index) => (\n                    <CTableRow v-for=\"item in tableItems\" key={index}>\n                      <CTableDataCell className=\"text-center\">\n                        <CAvatar size=\"md\" src={item.avatar.src} status={item.avatar.status} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div>{item.user.name}</div>\n                        <div className=\"small text-medium-emphasis\">\n                          <span>{item.user.new ? 'New' : 'Recurring'}</span> | Registered:{' '}\n                          {item.user.registered}\n                        </div>\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.country.flag} title={item.country.name} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"clearfix\">\n                          <div className=\"float-start\">\n                            <strong>{item.usage.value}%</strong>\n                          </div>\n                          <div className=\"float-end\">\n                            <small className=\"text-medium-emphasis\">{item.usage.period}</small>\n                          </div>\n                        </div>\n                        <CProgress thin color={item.usage.color} value={item.usage.value} />\n                      </CTableDataCell>\n                      <CTableDataCell className=\"text-center\">\n                        <CIcon size=\"xl\" icon={item.payment.icon} />\n                      </CTableDataCell>\n                      <CTableDataCell>\n                        <div className=\"small text-medium-emphasis\">Last login</div>\n                        <strong>{item.activity}</strong>\n                      </CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      */}\n    </>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}